%{
/* PEG Markdown Highlight
 * Copyright 2011 Ali Rantakari -- http://hasseg.org
 * Licensed under the GPL2+ and MIT licenses (see LICENSE for more info).
 * 
 * styleparser.leg
 * 
 */

#include "styleparser.h"
#include <stdarg.h>
#include <ctype.h>


// vasprintf is not in the C standard nor in POSIX so we provide our own
int our_vasprintf(char **strptr, const char *fmt, va_list argptr)
{
    int ret;
    va_list argptr2;
    *strptr = NULL;
    
    va_copy(argptr2, argptr);
    ret = vsnprintf(NULL, 0, fmt, argptr2);
    if (ret <= 0)
        return ret;
    
    *strptr = (char *)malloc(ret+1);
    if (*strptr == NULL)
        return -1;
    
    va_copy(argptr2, argptr);
    ret = vsnprintf(*strptr, ret+1, fmt, argptr2);
    
    return ret;
}



// Set custom symbol name prefix to avoid name collisions with the main
// PEG Markdown Highlight parser:
#define YY_NAME(N) style_yy##N


// Parsing context data
typedef struct
{
    char *input;
    int pos;
    void (*error_callback)(char*,void*);
    void *error_callback_context;
    int styles_pos;
    style_collection *styles;
} style_parser_data;

typedef struct sem_value
{
    char *name;
    char *value;
    struct sem_value *next;
} sem_value;

sem_value *new_sem_value(char *name, char *value)
{
    sem_value *v = (sem_value *)malloc(sizeof(sem_value));
    v->name = name;
    v->value = value;
    v->next = NULL;
    return v;
}

void free_sem_values(sem_value *list)
{
    sem_value *cur = list;
    while (cur != NULL)
    {
        if (cur->name != NULL) free(cur->name);
        if (cur->value != NULL) free(cur->value);
        sem_value *this = cur;
        cur = cur->next;
        free(this);
    }
}

static sem_value *cons(sem_value *elem, sem_value *list)
{
    elem->next = list;
    return elem;
}

void report_error(style_parser_data *p_data, char *str, ...)
{
    if (p_data->error_callback == NULL)
        return;
    va_list argptr;
    va_start(argptr, str);
    char *errmsg;
    our_vasprintf(&errmsg, str, argptr);
    va_end(argptr);
    p_data->error_callback(errmsg, p_data->error_callback_context);
    free(errmsg);
}



char *trim_str(char *str)
{
    while (isspace(*str))
        str++;
    if (*str == '\0')
        return str;
    char *end = str + strlen(str) - 1;
    while (end > str && isspace(*end))
        end--;
    *(end+1) = '\0';
    return str;
}

char *strcpy_lower(char *str)
{
    char *low = strdup(str);
    int i;
    int len = strlen(str);
    for (i = 0; i < len; i++)
        *(low+i) = tolower(*(low+i));
    return low;
}

char *standardize_str(char *str)
{
    return strcpy_lower(trim_str(str));
}




attr_argb_color *new_argb_color(int r, int g, int b, int a)
{
    attr_argb_color *c = (attr_argb_color *)malloc(sizeof(attr_argb_color));
    c->red = r; c->green = g; c->blue = b; c->alpha = a;
    return c;
}
attr_argb_color *new_argb_from_hex(long hex, bool has_alpha)
{
    // 0xaarrggbb
    int a = has_alpha ? ((hex >> 24) & 0xFF) : 255;
    int r = ((hex >> 16) & 0xFF);
    int g = ((hex >> 8) & 0xFF);
    int b = (hex & 0xFF);
    return new_argb_color(r,g,b,a);
}
attr_argb_color *new_argb_from_hex_str(style_parser_data *p_data, char *str)
{
    // "aarrggbb"
    int len = strlen(str);
    if (len != 6 && len != 8) {
        report_error(p_data,
                     "Value '%s' is not a valid color value: it should be a "
                     "hexadecimal number, 6 or 8 characters long.",
                     str);
        return NULL;
    }
    char *endptr = NULL;
    long num = strtol(str, &endptr, 16);
    if (*endptr != '\0') {
        report_error(p_data,
                     "Value '%s' is not a valid color value: the character "
                     "'%c' is invalid. The color value should be a hexadecimal "
                     "number, 6 or 8 characters long.",
                     str, *endptr);
        return NULL;
    }
    return new_argb_from_hex(num, (len == 8));
}

attr_value *new_attr_value()
{
    return (attr_value *)malloc(sizeof(attr_value));
}

attr_font_styles *new_font_styles()
{
    attr_font_styles *ret = (attr_font_styles *)
                            malloc(sizeof(attr_font_styles));
    ret->italic = false;
    ret->bold = false;
    ret->underlined = false;
    return ret;
}

style_attribute *new_attr(char *name, attr_type type)
{
    style_attribute *attr = (style_attribute *)malloc(sizeof(style_attribute));
    attr->name = strdup(name);
    attr->type = type;
    attr->next = NULL;
    return attr;
}

void free_style_attributes(style_attribute *list)
{
    style_attribute *cur = list;
    while (cur != NULL)
    {
        if (cur->name != NULL)
            free(cur->name);
        if (cur->value != NULL)
        {
            if (cur->type == attr_type_foreground_color
                || cur->type == attr_type_background_color
                || cur->type == attr_type_caret_color)
                free(cur->value->argb_color);
            else if (cur->type == attr_type_font_family)
                free(cur->value->font_family);
            else if (cur->type == attr_type_font_style)
                free(cur->value->font_styles);
            else if (cur->type == attr_type_other)
                free(cur->value->string);
            free(cur->value);
        }
        style_attribute *this = cur;
        cur = cur->next;
        free(this);
    }
}






char **get_element_type_names()
{
    static char **elem_type_names = NULL;
    if (elem_type_names == NULL)
    {
        elem_type_names = (char **)malloc(sizeof(char*) * pmh_NUM_LANG_TYPES);
        int i;
        for (i = 0; i < pmh_NUM_LANG_TYPES; i++)
            elem_type_names[i] = NULL;
        elem_type_names[pmh_LINK] = "LINK";
        elem_type_names[pmh_AUTO_LINK_URL] = "AUTO_LINK_URL";
        elem_type_names[pmh_AUTO_LINK_EMAIL] = "AUTO_LINK_EMAIL";
        elem_type_names[pmh_IMAGE] = "IMAGE";
        elem_type_names[pmh_CODE] = "CODE";
        elem_type_names[pmh_HTML] = "HTML";
        elem_type_names[pmh_HTML_ENTITY] = "HTML_ENTITY";
        elem_type_names[pmh_EMPH] = "EMPH";
        elem_type_names[pmh_STRONG] = "STRONG";
        elem_type_names[pmh_LIST_BULLET] = "LIST_BULLET";
        elem_type_names[pmh_LIST_ENUMERATOR] = "LIST_ENUMERATOR";
        elem_type_names[pmh_COMMENT] = "COMMENT";
        elem_type_names[pmh_H1] = "H1";
        elem_type_names[pmh_H2] = "H2";
        elem_type_names[pmh_H3] = "H3";
        elem_type_names[pmh_H4] = "H4";
        elem_type_names[pmh_H5] = "H5";
        elem_type_names[pmh_H6] = "H6";
        elem_type_names[pmh_BLOCKQUOTE] = "BLOCKQUOTE";
        elem_type_names[pmh_VERBATIM] = "VERBATIM";
        elem_type_names[pmh_HTMLBLOCK] = "HTMLBLOCK";
        elem_type_names[pmh_HRULE] = "HRULE";
        elem_type_names[pmh_REFERENCE] = "REFERENCE";
        elem_type_names[pmh_NOTE] = "NOTE";
    }
    return elem_type_names;
}

element_type element_type_from_name(char *name)
{
    char **elem_type_names = get_element_type_names();
    
    int i;
    for (i = 0; i < pmh_NUM_LANG_TYPES; i++)
    {
        char *i_name = elem_type_names[i];
        if (i_name == NULL)
            continue;
        if (strcmp(i_name, name) == 0)
            return i;
    }
    
    return pmh_NO_TYPE;
}

char *element_name_from_type(element_type type)
{
    char **elem_type_names = get_element_type_names();
    char* ret = elem_type_names[type];
    if (ret == NULL)
        return "unknown type";
    return ret;
}


#define IF_ATTR_NAME(x) if (strcmp(x, name) == 0)
attr_type attr_type_from_name(char *name)
{
    IF_ATTR_NAME("color") return attr_type_foreground_color;
    else IF_ATTR_NAME("foreground") return attr_type_foreground_color;
    else IF_ATTR_NAME("foreground-color") return attr_type_foreground_color;
    else IF_ATTR_NAME("background") return attr_type_background_color;
    else IF_ATTR_NAME("background-color") return attr_type_background_color;
    else IF_ATTR_NAME("caret") return attr_type_caret_color;
    else IF_ATTR_NAME("caret-color") return attr_type_caret_color;
    else IF_ATTR_NAME("font-size") return attr_type_font_size_pt;
    else IF_ATTR_NAME("font-family") return attr_type_font_family;
    else IF_ATTR_NAME("font-style") return attr_type_font_style;
    return attr_type_other;
}

char *attr_name_from_type(attr_type type)
{
    switch (type)
    {
        case attr_type_foreground_color:
            return "foreground-color"; break;
        case attr_type_background_color:
            return "background-color"; break;
        case attr_type_caret_color:
            return "caret-color"; break;
        case attr_type_font_size_pt:
            return "font-size"; break;
        case attr_type_font_family:
            return "font-family"; break;
        case attr_type_font_style:
            return "font-style"; break;
        default:
            return "unknown";
    }
}


typedef struct multi_value
{
    char *value;
    struct multi_value *next;
} multi_value;

multi_value *split_multi_value(char *input)
{
    multi_value *head = NULL;
    
    char *c = input;
    while (*c != '\0')
    {
        size_t i;
        for (i = 0; (*(c+i) != '\0' && *(c+i) != ','); i++);
        multi_value *mv = (multi_value *)malloc(sizeof(multi_value));
        mv->value = (char *)malloc(sizeof(char)*i + 1);
        *mv->value = '\0';
        strncat(mv->value, c, i);
        mv->next = head;
        head = mv;
        if (*(c+i) == ',')
            i++;
        c += i;
    }
    
    return head;
}

void free_multi_value(multi_value *val)
{
    multi_value *cur = val;
    while (cur != NULL)
    {
        multi_value *this = cur;
        free(this->value);
        free(this);
        cur = cur->next;
    }
}




#define EQUALS(a,b) (strcmp(a, b) == 0)
style_attribute *interpret_attributes(style_parser_data *p_data,
                                      element_type lang_element_type,
                                      sem_value *raw_attributes)
{
    style_attribute *attrs = NULL;
    
    sem_value *cur = raw_attributes;
    while (cur != NULL)
    {
        attr_type atype = attr_type_from_name(cur->name);
        style_attribute *attr = new_attr(cur->name, atype);
        attr->lang_element_type = lang_element_type;
        attr->value = new_attr_value();
        
        if (atype == attr_type_foreground_color
            || atype == attr_type_background_color
            || atype == attr_type_caret_color)
        {
            char *hexstr = trim_str(cur->value);
            // new_argb_from_hex_str() reports conversion errors
            attr->value->argb_color = new_argb_from_hex_str(p_data, hexstr);
            if (attr->value->argb_color == NULL) {
                free_style_attributes(attr);
                attr = NULL;
            }
        }
        else if (atype == attr_type_font_size_pt)
        {
            char *endptr = NULL;
            attr->value->font_size_pt = (int)strtol(cur->value, &endptr, 10);
            if (endptr == cur->value) {
                report_error(p_data, "Value '%s' is invalid for attribute '%s'",
                             cur->value, cur->name);
                free_style_attributes(attr);
                attr = NULL;
            }
        }
        else if (atype == attr_type_font_family)
        {
            attr->value->font_family = strdup(cur->value);
        }
        else if (atype == attr_type_font_style)
        {
            attr->value->font_styles = new_font_styles();
            multi_value *values = split_multi_value(cur->value);
            multi_value *value_cur = values;
            while (value_cur != NULL)
            {
                char *standardized_value = standardize_str(value_cur->value);
                
                if (EQUALS(standardized_value, "italic"))
                    attr->value->font_styles->italic = true;
                else if (EQUALS(standardized_value, "bold"))
                    attr->value->font_styles->bold = true;
                else if (EQUALS(standardized_value, "underlined"))
                    attr->value->font_styles->underlined = true;
                else {
                    report_error(p_data, "Value '%s' is invalid for attribute '%s'",
                                 standardized_value, cur->name);
                }
                
                free(standardized_value);
                value_cur = value_cur->next;
            }
            free_multi_value(values);
        }
        else if (atype == attr_type_other)
        {
            attr->value->string = strdup(cur->value);
        }
        
        if (attr != NULL) {
            // add to linked list
            attr->next = attrs;
            attrs = attr;
        }
        
        cur = cur->next;
    }
    
    return attrs;
}


void interpret_and_add_style(style_parser_data *p_data,
                             char *element_type_name,
                             sem_value *raw_attributes)
{
    bool isEditorType = false;
    bool isCurrentLineType = false;
    bool isSelectionType = false;
    element_type type = element_type_from_name(element_type_name);
    if (type == pmh_NO_TYPE)
    {
        if (EQUALS(element_type_name, "editor"))
            isEditorType = true, type = pmh_NO_TYPE;
        else if (EQUALS(element_type_name, "editor-current-line"))
            isCurrentLineType = true, type = pmh_NO_TYPE;
        else if (EQUALS(element_type_name, "editor-selection"))
            isSelectionType = true, type = pmh_NO_TYPE;
        else {
            report_error(p_data,
                "Style rule '%s' is not a language element type name or "
                "one of the following: 'editor', 'editor-current-line', "
                "'editor-selection'",
                element_type_name);
            return;
        }
    }
    style_attribute *attrs = interpret_attributes(p_data, type, raw_attributes);
    if (isEditorType)
        p_data->styles->editor_styles = attrs;
    else if (isCurrentLineType)
        p_data->styles->editor_current_line_styles = attrs;
    else if (isSelectionType)
        p_data->styles->editor_selection_styles = attrs;
    else
        p_data->styles->element_styles[(p_data->styles_pos)++] = attrs;
}



# define YYSTYPE sem_value *
#ifdef __DEBUG__
# define YY_DEBUG 1
#endif

#define YY_INPUT(buf, result, max_size) YY_NAME(input_func)(buf, &result, max_size, (style_parser_data *)G->data)
void YY_NAME(input_func)(char *buf, int *result, int max_size, style_parser_data *p_data)
{
    int yyc = *(p_data->input + p_data->pos++);
    (*result) = (EOF == yyc) ? 0 : (*(buf) = yyc, 1);
}

#define SEMVAL  new_sem_value(strdup(yytext), NULL);
/* ======================================================================== */
%}

Doc =           ( (BlankLine|LineComment)*
                  StyleDef
                )*

StartList =     &. { $$ = NULL; }

StyleDef =      x:StartList
                l:StyleLabel
                Sp (LineComment|Newline)
                ( a:StyleAttrLine { x = cons(a, x); }
                  | IndentMaybe LineComment
                )+
                { interpret_and_add_style((style_parser_data *)G->data,
                                          l->name, x);
                  free_sem_values(x);
                  free_sem_values(l);
                }

StyleLabel =    IndentMaybe < StyleLabelChar+ >
                { $$ = SEMVAL; }
                Sp AssignOp?
                

StyleAttrLine = IndentMaybe a:StyleAttr Sp (LineComment|Newline|Eof)
                { $$ = a; }

AssignOp =      ':'|'='

StyleAttr =     < AttrNameChar+ >
                { $$ = SEMVAL; }
                Sp AssignOp Sp
                < AttrValueChar+ >
                { $$->value = strdup(yytext); }

StyleLabelChar = [A-Za-z0-9-_]
AttrNameChar =  [A-Za-z0-9-]
AttrValueChar = (!Newline !Eof !BeginLineComment .)

IndentMaybe =   ("\t" | " ")*
BlankLine =     Sp Newline
Eof =           !.
Spacechar =     ' ' | '\t'
#Nonspacechar =  !Spacechar !Newline .
Newline =       '\n' | '\r' '\n'?
Sp =            Spacechar*
#Spnl =          Sp (Newline Sp)?
#Digit = [0-9]

BeginLineComment = '#'
AnythingTillEol = (!Newline !Eof .)* (Newline|Eof)
LineComment =   BeginLineComment AnythingTillEol

%%
/* ======================================================================== */

void _sty_parse(style_parser_data *p_data)
{
    GREG *g = YY_NAME(parse_new)(p_data);
    YY_NAME(parse)(g);
    YY_NAME(parse_free)(g);
}

style_collection *new_style_collection()
{
    style_collection *sc = (style_collection *)
                           malloc(sizeof(style_collection));
    
    sc->element_styles = (style_attribute**)
                         malloc(sizeof(style_attribute*) * pmh_NUM_LANG_TYPES);
    int i;
    for (i = 0; i < pmh_NUM_LANG_TYPES; i++)
        sc->element_styles[i] = NULL;
    
    sc->editor_styles = NULL;
    sc->editor_current_line_styles = NULL;
    sc->editor_selection_styles = NULL;
    
    return sc;
}

void free_style_collection(style_collection *coll)
{
    free_style_attributes(coll->editor_styles);
    free_style_attributes(coll->editor_current_line_styles);
    free_style_attributes(coll->editor_selection_styles);
    int i;
    for (i = 0; i < pmh_NUM_LANG_TYPES; i++)
        free_style_attributes(coll->element_styles[i]);
    free(coll->element_styles);
    free(coll);
}

style_parser_data *new_style_parser_data(char *input)
{
    style_parser_data *p_data = (style_parser_data*)
                                malloc(sizeof(style_parser_data));
    p_data->input = input;
    p_data->pos = 0;
    p_data->styles_pos = 0;
    p_data->styles = new_style_collection();
    return p_data;
}

style_collection *parse_styles(char *input, void(*error_callback)(char*,void*),
                               void *error_callback_context)
{
    style_parser_data *p_data = new_style_parser_data(input);
    p_data->error_callback = error_callback;
    p_data->error_callback_context = error_callback_context;
    
    _sty_parse(p_data);
    
    style_collection *ret = p_data->styles;
    free(p_data);
    return ret;
}


